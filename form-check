#!/usr/bin/env bash
# Author: Tim Tang
# This script adds a delay in a local video stream via VLC

set -eo pipefail

# constants and defaults
VLC_SEARCH_DIR=/Applications/VLC.app
OPT_NO_SOUND=":none"
DELAY=5
DEVICE_NAME=""

source functions
cleanup()
{
    kill -9 $1
}

usage()
{
    echo "Usage: $0 [-l] [-d <delay_in_seconds>] [-t <name_of_camera>]" >&2 && exit 1
}

# set up 
while getopts ":ld:t:" opt; do
    case ${opt} in
        l)
            list_devices
            exit 0
            ;;
        d)
            DELAY=$OPTARG
            ;;
        t)
            DEVICE_NAME=$OPTARG
            ;;
        *)
            usage
            ;;
    esac
done

IN_VIDEO=$(get_device_number "$DEVICE_NAME")

# get framerate and resolution
res_fps=( $(select_available_modes $IN_VIDEO) )
RESOLUTION=${res_fps[0]}
FRAMERATE=${res_fps[1]}

# ensure ffmpeg and vlc are installed
which ffmpeg > /dev/null 2>&1 || ( echo "Please ensure ffmpeg is installed" && exit 1 )
export vlc="$(find $VLC_SEARCH_DIR -name VLC)"
test -n $vlc || ( echo "Please ensure VLC is installed" && exit 1 )

# fork ffmpeg (start stream)
ffmpeg -f avfoundation \
       -video_size $RESOLUTION \
       -framerate $FRAMERATE \
       -i "${IN_VIDEO}${OPT_NO_SOUND}" -an \
       -target film-dvd \
       -preset ultrafast \
       -tune zerolatency \
       -f rtp rtp://0.0.0.0:1234 > ffmpeg.log 2>&1 &
trap "cleanup $!" STOP KILL TERM QUIT HUP

# fork vlc (attach to stream with http remote control)
$vlc --extraintf http -I macosx rtp://@:1234 --http-password=1234 > vlc.log 2>&1 &
trap "cleanup $!" STOP KILL TERM QUIT HUP
sleep 2 # allow http server to go up

# pause for specified delay and resume
curl -s "http://127.0.0.1:8080/requests/status.xml?command=pl_pause" -u :1234 > /dev/null
sleep $DELAY
curl -s "http://127.0.0.1:8080/requests/status.xml?command=pl_play" -u :1234 > /dev/null

while : ; do
    echo "CTRL+C to exit"
    read input
done

